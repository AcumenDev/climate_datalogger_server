syntax = "proto2";
//package tutorial;

//option java_package = "com.acumendev.climatelogger.input.tcp";

option java_package = "com.acumen.tcp.dto_new";
//protoc --java_out=./client_stub/src/main/java/ ./client_stub/protobuf/TemperatureProtocol.proto

//option java_package = "com.acumendev.climatelogger.input.tcp";
//protoc --java_out=./server/src/main/java/ ./client_stub/protobuf/TemperatureProtocol.proto



////home/vst/soft/nanopb-0.3.9.1-linux-x86/nanopb-0.3.9.1-linux-x86/generator-bin/protoc --nanopb_out=nano/ TemperatureProtocol.proto
message BaseMessage {
    required PacketType type = 1;
    optional AuthRequest authRequest = 2;
    optional AuthResponse authResponse = 3;
    optional NotifyRequest notifyRequest = 4;
    optional ConfigSet configSet = 5;
    optional ConfigChanges configChanges = 6;
    optional ActualConfig actualConfig = 7;
}

enum PacketType {
    authRequest = 1;
    authResponse = 2;
    notifyRequest = 3;
    notifyResponse = 4;

    getActualConfig = 5;
    actualConfig = 6;
    setConfig = 7;
    configChanges = 8;
}

///Client send
message AuthRequest {
    required int32 type = 1;
    required int32 version = 2;
    required string apiKey = 3;
}

message AuthResponse {
    required int32 state = 1;
}

message NotifyRequest {
    optional float current = 1;
    optional uint32 heatingState = 5;
    optional uint32 coolingState = 6;
}

///Server send

message ConfigSet {
    optional float target = 1;
    optional float gisteris = 2;
    optional float tuningSensor = 3;
}

message ActualConfig {
    required float target = 1;
    required float gisteris = 2;
    required float tuningSensor = 3;
}

message ConfigChanges {
    optional float target = 1;
    optional float gisteris = 2;
    optional float tuningSensor = 3;
}
