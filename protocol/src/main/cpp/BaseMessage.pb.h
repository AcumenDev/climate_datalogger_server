/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.1 at Wed Apr 18 23:17:14 2018. */

#ifndef PB_BASEMESSAGE_PB_H_INCLUDED
#define PB_BASEMESSAGE_PB_H_INCLUDED
#include <pb.h>

#include "Temperature.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Auth {
    bool has_type;
    int32_t type;
    bool has_version;
    int32_t version;
    pb_callback_t apiKey;
    bool has_state;
    int32_t state;
/* @@protoc_insertion_point(struct:Auth) */
} Auth;

typedef struct _BaseMessage {
    bool has_auth;
    Auth auth;
    bool has_temperature;
    Temperature temperature;
/* @@protoc_insertion_point(struct:BaseMessage) */
} BaseMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define BaseMessage_init_default                 {false, Auth_init_default, false, Temperature_init_default}
#define Auth_init_default                        {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define BaseMessage_init_zero                    {false, Auth_init_zero, false, Temperature_init_zero}
#define Auth_init_zero                           {false, 0, false, 0, {{NULL}, NULL}, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Auth_type_tag                            1
#define Auth_version_tag                         2
#define Auth_apiKey_tag                          3
#define Auth_state_tag                           4
#define BaseMessage_auth_tag                     1
#define BaseMessage_temperature_tag              2

/* Struct field encoding specification for nanopb */
extern const pb_field_t BaseMessage_fields[3];
extern const pb_field_t Auth_fields[5];

/* Maximum encoded size of messages (where known) */
#define BaseMessage_size                         (44 + Auth_size)
/* Auth_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BASEMESSAGE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
